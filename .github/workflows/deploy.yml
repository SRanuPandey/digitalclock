name: Deploy Azure WebApp with Terraform  # Name of the GitHub Actions workflow

on:
  push:
    branches:
      - feature_rel1  # Triggers this workflow on a push to the 'feature_rel1' branch

env:  # Define environment variables used for authentication to Azure
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}  # Azure Service Principal Client ID
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}  # Azure Service Principal Secret
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}  # Azure Subscription ID
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}  # Azure Tenant ID

jobs:

  
  terraform:
     name: Plan  # Name of the job
     runs-on: ubuntu-latest  # The job runs on the latest Ubuntu environment provided by GitHub Actions
     steps:
      - name: Checkout Code  # Step to check out the repository code
        uses: actions/checkout@v3  # GitHub Action to check out the code from the repository
                  
      - name: Set up Terraform  # Step to set up Terraform CLI
        uses: hashicorp/setup-terraform@v2  # HashiCorp's action to set up Terraform

      - name: Terraform Init  # Step to initialize Terraform in the ./terraform directory
        working-directory: ./terraform  
        run: terraform init  # Initialize Terraform backend and modules

      - name: Validate Terraform  # Step to validate the Terraform configuration
        working-directory: ./terraform  
        run: terraform validate  # Run terraform validate to ensure configuration is correct
  
      - name: Plan Terraform  # Step to create an execution plan
        working-directory: ./terraform  
        run: terraform plan -out=plan  # Generate and display the execution plan
        # Step to create the ZIP file for static website
      - name: Create static website ZIP
        working-directory: ./digiclock
        run: zip -r static-website.zip index.html script.js style.css

       # Upload the ZIP file as an artifact
      - name: Upload static website artifact
        uses: actions/upload-artifact@v3
        with:
         name: static-website
         path: ./digiclock/static-website.zip

      - name: Prepare ZIP of Static Website
        run: |
            echo "$(pwd)"
            mkdir $(pwd)/website
            cp ./digiclock/* $(pwd)/website
            cd $(pwd)/website
            zip -r static-website.zip index.html script.js style.css  # Create ZIP
            cp $(pwd)/static-website.zip ../terraform/static-website.zip
            chmod 755 ../terraform/static-website.zip
            cd ../terraform/
            echo "$(pwd)"
            ls

  manual-approval:
    name: Approval for Apply  # Job for manual approval before applying the changes
    runs-on: ubuntu-latest  
    needs: terraform  # This job will wait until the 'terraform' job is completed
    environment: dev  # Specifies the environment requiring approval (e.g., development)
    steps:
      - name: Wait for Approval  # Step to wait for manual approval
        run: echo "Waiting for manual approval before applying Terraform changes."  # Display a message for manual approval

  apply:
    name: Apply Plan  # Job to apply the Terraform plan after approval
    runs-on: ubuntu-latest 
    needs: manual-approval  # Wait until the 'manual-approval' job is completed

    steps:
      - name: Checkout Code  # Step to check out the repository code again
        uses: actions/checkout@v3  # Action to check out the code

      - name: Set up Terraform  # Step to set up Terraform CLI again
        uses: hashicorp/setup-terraform@v2  # HashiCorp's action to set up Terraform
      
      - name: Terraform Init  # Step to initialize Terraform again in the ./terraform directory
        working-directory: ./terraform  
        run: terraform init  # Initialize Terraform backend and modules

      - name: Validate Terraform  # Step to validate the Terraform configuration again
        working-directory: ./terraform
        run: terraform validate  # Run terraform validate to ensure configuration is correct
  
                # Step to create the ZIP file for static website
      - name: Create static website ZIP
        working-directory: ./digiclock
        run: zip -r static-website.zip index.html script.js style.css

     # Upload the ZIP file as an artifact
      - name: Upload static website artifact
        uses: actions/upload-artifact@v3
        with:
         name: static-website
         path: ./digiclock/static-website.zip
      - name: Plan Terraform  # Step to create the plan again (optional)
        working-directory: ./terraform
        run: terraform plan -out=plan  # Generate and display the execution plan

       

   
      - name: Apply Terraform  # Step to apply the plan
        working-directory: ./terraform
        run: terraform apply -auto-approve  # Apply the Terraform configuration without requiring manual approval at this stage
       
  deploy:
    name: Deploy to Azure Web App
    runs-on: ubuntu-latest
    needs: apply

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download the ZIP file artifact
      - name: Download static website artifact
        uses: actions/download-artifact@v3
        with:
          name: static-website

      # Deploy to Azure Web App using the downloaded ZIP file
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: webapp-digiclock
          slot-name: production
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: static-website.zip  # No need to specify the full path, it's in the current directory after download      
       
   